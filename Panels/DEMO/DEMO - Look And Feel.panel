<?xml version="1.0" encoding="UTF-8"?>

<panel name="DEMO - Look And Feel" panelShowDialogs="1" panelMessageTime="10000"
       panelAuthorName="Roman Kubiak" panelAuthorEmail="kubiak.roman@gmail.com"
       panelAuthorUrl="http://ctrlr.org" panelAuthorDesc="" panelVersionMajor="1"
       panelVersionMinor="0" panelVersionName="Hell-O-Kitty" panelVendor=""
       panelDevice="" panelMidiSnapshotAfterLoad="0" panelMidiSnapshotAfterProgramChange="0"
       panelMidiSnapshotDelay="10" panelMidiInputChannelDevice="1" panelMidiInputDevice="-- None"
       panelMidiControllerChannelDevice="1" panelMidiControllerDevice="-- None"
       panelMidiOutputChannelDevice="1" panelMidiOutputDevice="-- None"
       panelMidiInputFromHost="0" panelMidiInputChannelHost="1" panelMidiOutputToHost="0"
       panelMidiOutputChannelHost="1" panelMidiThruH2H="0" panelMidiThruH2HChannelize="0"
       panelMidiThruH2D="0" panelMidiThruH2DChannelize="0" panelMidiThruD2D="0"
       panelMidiThruD2DChannelize="0" panelMidiThruD2H="0" panelMidiThruD2HChannelize="0"
       panelMidiRealtimeIgnore="1" panelMidiInputThreadPriority="7"
       panelMidiProgram="0" panelMidiBankLsb="0" panelMidiBankMsb="0"
       panelMidiSendProgramChangeOnLoad="0" panelMidiProgramCalloutOnprogramChange="0"
       panelMidiMatchCacheSize="32" panelMidiGlobalDelay="0" luaPanelMidiChannelChanged="-- None"
       luaPanelMidiReceived="-- None" luaPanelLoaded="-- None" luaPanelBeforeLoad="-- None"
       luaPanelSaved="-- None" luaPanelResourcesLoaded="-- None" luaPanelProgramChanged="-- None"
       luaPanelGlobalChanged="-- None" luaPanelMessageHandler="-- None"
       luaPanelModulatorValueChanged="-- None" panelFilePath="/home/r.kubiak/devel/ctrlr/Panels/DEMO - Look And Feel.panel"
       panelUID="8.pROXT.fz55M" panelInstanceUID="fa37" panelInstanceManufacturerID="JncC"
       panelModulatorListColumns="-- None" panelModulatorListCsvDelimiter=","
       panelModulatorListXmlRoot="ctrlrModulatorList" panelModulatorListXmlModulator="ctrlrModulator"
       panelModulatorListSortOption="1" panelGlobalVariables="0:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1"
       panelResources="-- None" panelPropertyDisplayIDs="0" ctrlrMenuItemBackgroundColour="ffffffff"
       ctrlrMenuItemTextColour="ff000000" ctrlrMenuItemHighlightedTextColour="ffffffff"
       ctrlrMenuItemHighlightColour="ff4364ff" ctrlrMenuItemFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;0"
       ctrlrMenuItemSeparatorColour="44000000" ctrlrMenuItemHeaderColour="ff000000"
       ctrlrMenuBarBackgroundColour1="fff7f7f7" ctrlrMenuBarBackgroundColour2="ffcccccc"
       ctrlrMenuBarTextColour="ff000000" ctrlrMenuBarHighlightedTextColour="ffffffff"
       ctrlrMenuBarHighlightColour="ff4364ff" ctrlrMenuBarFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;0"
       ctrlrUseEditorWrapper="0" panelIndex="0">
  <uiWindowManager>
    <uiChildWindow uiChildWindowName="BufferEditor" uiChildWindowState="564 317 800 500">
      <uiChildWindowContentState>
        <midiBufferEditorLeft midiBufferEditorSource="0" midiBufferEditorFilePath="" midiBufferEditorCodeEditor="0:0:0"/>
        <midiBufferEditorRight midiBufferEditorSource="0" midiBufferEditorFilePath="" midiBufferEditorCodeEditor="0:0:0"/>
      </uiChildWindowContentState>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="LuaMethodEditor" uiChildWindowState="1924 27 1912 1049">
      <uiChildWindowContentState luaMethodEditor="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&#13;&#10;&lt;OPEN id=&quot;LUA&quot; scrollPos=&quot;0&quot;&gt;&#13;&#10;  &lt;SELECTED id=&quot;/LUA/MyLookAndFeel&quot;/&gt;&#13;&#10;&lt;/OPEN&gt;&#13;&#10;;5ce26fb5bdfb44519e9b03045854b224:d3bf7366f6c044c2b0ad6880e27eb695"/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="LuaConsole" uiChildWindowState="572 371 1232 593">
      <uiChildWindowContentState/>
    </uiChildWindow>
  </uiWindowManager>
  <midiLibrary uuid="d3b4794192e34cd3aba647e898c779dc" luaTransInfo="-- None"
               midiLibraryParameterIndexProperty="modulatorCustomIndex" midiLibraryMidiProgramChangeControl="0"
               midiLibrarySendSnapAfterPChg="0" midiLibraryDefaultBankName="New Bank - %H:%M:%S"
               midiLibraryDefaultProgramName="New Program - %H:%M:%S" midiLibraryDefaultSnapshotName="Snapshot - %H:%M:%S"
               midiLibraryCustomRequests="">
    <midiLibrarySnapshots name="Snapshots"/>
    <midiLibraryFirmware name="Firmware"/>
    <midiLibraryEditBuffer name="Edit buffer"/>
    <midiLibraryTransactions name="Transactions">
      <trans name="Request Identity" enabled="1" internal="1" transCap="midiLibrary"
             timeout="1000" transReqFormulaPrefix="F0 7E 7F 06 01" transReqFormulaSuffix="F7"
             transRespSizeCheck="0" transReqDataLen="0" transReqExists="1"
             transConfExists="0" transRespFormulaPrefix="F0 7E 7F 06 02" transRespFormulaSuffix="F7"
             transRespDataLen="8" transRespDataCheck="1" transRespExists="1"/>
      <trans name="Request Identity [LUA]" enabled="1" internal="1" transCap="midiLibrary"
             timeout="1000" transReqFormulaPrefix="" transReqFormulaSuffix=""
             transReqDataLen="0" transReqExists="1" transConfExists="0" transRespFormulaPrefix=""
             transRespFormulaSuffix="" transRespDataLen="8" transRespDataCheck="0"
             transRespSizeCheck="0" transRespExists="1" luaTransRequest="transIdReq"
             luaTransProcess="transIdProc"/>
      <trans name="Send SYX file" enabled="1" internal="1" transCap="midiLibrary"
             timeout="1000" transReqFormulaPrefix="" transReqFormulaSuffix=""
             transReqDataLen="0" transReqExists="1" transConfExists="0" transRespFormulaPrefix=""
             transRespFormulaSuffix="" transRespDataLen="0" transRespDataCheck="0"
             transRespExists="0" luaTransRequest="transSYXSendReq"/>
      <trans name="Recieve SYX file" enabled="1" internal="1" transCap="midiLibrary"
             timeout="1000" transReqFormulaPrefix="" transReqFormulaSuffix=""
             transReqDataLen="0" transReqExists="1" transConfExists="0" transRespFormulaPrefix=""
             transRespFormulaSuffix="" transRespDataLen="0" transRespDataCheck="0"
             transRespExists="1" luaTransRequest="transSYXRcvReq" luaTransProcess="transSYXRcvProc"/>
    </midiLibraryTransactions>
  </midiLibrary>
  <luaManager>
    <luaManagerMethods>
      <luaMethodGroup name="Built-In" uuid="df8f476009424390b6e4187fc1aa69ec">
        <luaMethod luaMethodName="table_dump" luaMethodCode="--&#13;&#10;-- Print table contents&#13;&#10;--&#13;&#10;function table_dump(table)&#13;&#10;&#9;for key,value in ipairs(table) do&#13;&#10;&#9;&#9;debug (&quot;KEY= [&quot;..key..&quot;]&quot;)&#13;&#10;&#13;&#10;&#9;&#9;if (type(value) == &quot;table&quot;) then&#13;&#10;&#9;&#9;&#9;table_dump(value)&#13;&#10;&#9;&#9;elseif (type(value) == &quot;nil&quot;) then&#13;&#10;&#9;&#9;&#9;debug (&quot; = NIL&quot;)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;what (value)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000001"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="what" luaMethodCode="--&#13;&#10;-- Print methods for an object&#13;&#10;--&#13;&#10;function what(o)&#13;&#10;&#9;info = class_info(o)&#13;&#10;&#9;if info ~= nil then&#13;&#10;&#9;&#9;ret = &quot;Object type [&quot; .. info.name .. &quot;]\n-----------------------------------------------------------------\n\n&quot;..&quot;Members:\n&quot;&#13;&#10;&#13;&#10;&#9;&#9;if info.name == &quot;table&quot; then&#13;&#10;&#9;&#9;&#9;table_dump(o)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;for k, v in pairs(info.methods) do&#13;&#10;&#9;&#9;&#9;ret = ret .. string.format (&quot;\t%30s:\t%5s\n&quot;, k, type(v))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;ret = ret .. &quot;\n\nAttributes:\n&quot;&#13;&#10;&#9;&#9;for k, v in pairs(info.attributes) do&#13;&#10;&#9;&#9;&#9;ret = ret .. string.format (&quot;\t%30s:\t%5s\n&quot;, k, type(v))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;debug (ret)&#13;&#10;&#9;return ret&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000002"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="how" luaMethodCode="--&#13;&#10;-- Print all available classes&#13;&#10;--&#13;&#10;function how()&#13;&#10;&#9;ret = &quot;Available classes:\n&quot;&#13;&#10;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#13;&#10;&#9;for i,v in ipairs(class_names()) do&#13;&#10;&#9;&#9;ret = ret .. &quot;\t&quot;.. v .. &quot;\n&quot;&#13;&#10;&#9;end&#13;&#10;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#13;&#10;&#9;debug (ret)&#13;&#10;&#9;return ret&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000003"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="transSYXSendReq" luaMethodCode="function transSYXSendReq(transaction)&#13;&#10;&#9;console(&quot;transSYXSendReq&quot;)&#13;&#10;&#9;fileToSend = utils.openFileWindow(&quot;SYX file to send&quot;, File.getSpecialLocation(File.userHomeDirectory), &quot;*.*&quot;, true)&#13;&#10;&#13;&#10;&#9;if fileToSend:existsAsFile() then&#13;&#10;&#9;&#9;result = MemoryBlock (0, true)&#13;&#10;&#9;&#9;fileToSend:loadFileAsData (result)&#13;&#10;&#13;&#10;&#9;&#9;if result:getSize() &lt;= 0 then&#13;&#10;&#9;&#9;&#9;utils.warnWindow (&quot;Send SYX File&quot;, &quot;Reading the file resultet in 0 data bytes&quot;)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;debug (&quot;sending file: &quot;..fileToSend:getFullPathName())&#13;&#10;&#13;&#10;&#9;&#9;transaction:setRequest (result)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;utils.warnWindow (&quot;Send SYX File&quot;, &quot;Can't read selected file&quot;)&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000004"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="transSYXRcvReq" luaMethodCode="function transSYXRcvReq(transaction)&#13;&#10;&#9;console(&quot;transSYXRcvReq&quot;)&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000005"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="transSYXRcvProc" luaMethodCode="function transSYXRcvProc(transaction)&#13;&#10;&#9;console(&quot;transSYXRcvProc&quot;)&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000006"
                   luaMethodValid="1"/>
      </luaMethodGroup>
      <luaMethod luaMethodName="setLookAndFeel1" luaMethodCode="--&#13;-- Called when a modulator value changes&#13;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#13;-- @value    new numeric value of the modulator&#13;--&#13;setLookAndFeel1 = function(mod, value)&#13;&#10;&#9;if value == 0 then&#13;&#10;&#9;&#9;console (&quot;Set look and feel to default&quot;)&#13;&#10;&#9;&#9;setLookAndFeel (panel:getComponent(&quot;group&quot;), nil)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;myLookAndFeel = MyLookAndFeel()&#13;&#10;&#13;&#10;&#9;setLookAndFeel (panel:getComponent(&quot;group&quot;), myLookAndFeel)&#13;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="5ce26fb5bdfb44519e9b03045854b224" luaMethodValid="1"/>
      <luaMethod luaMethodName="MyLookAndFeel" luaMethodCode="class 'MyLookAndFeel' (LookAndFeel_V3)&#10;&#10;function MyLookAndFeel:__init()&#10;&#9;--&#10;&#9;-- This is needed for luabind, please don't remove this line&#10;&#9;-- Add as much code as you like here, just leave this&#10;&#9;--&#10;&#9;LookAndFeel_V3.__init(self)&#10;end&#10;&#10;-- function MyLookAndFeel:findColour (--[[int]] colourId)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Colour()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:setColour (--[[int]] colourId, --[[Colour]] colour)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:isColourSpecified (--[[int]] colourId)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = true&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getTypefaceForFont (--[[Font]] font)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Typeface::Ptr()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getMouseCursorFor (--[[Component]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = MouseCursor()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawButtonBackground (--[[Graphics]] g, --[[Button]] b, --[[Colour]] c, --[[bool]] over, --[[bool]] down)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawButtonText (--[[Graphics]] g, --[[TextButton]] button, --[[bool]] isMouseOverButton, --[[bool]] isButtonDown)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawToggleButton (--[[Graphics]] g, --[[ToggleButton]] button, --[[bool]] isMouseOverButton, --[[bool]] isButtonDown)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:changeToggleButtonWidthToFitText (--[[ToggleButton]] button)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;function MyLookAndFeel:drawTickBox (--[[Graphics]] g, --[[Component]] component, --[[float]] x, --[[float]] y, --[[float]] w, --[[float]] h, --[[bool]] ticked, --[[bool]] isEnabled, --[[bool]] isMouseOverButton, --[[bool]] isButtonDown)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#13;&#10;&#9;g:setColour (Colour (0xff00ffab))&#13;&#10;&#9;g:fillRect (x,y,w,h)&#10;end&#10;&#10;-- function MyLookAndFeel:createAlertWindow (--[[String]] title, --[[String]] message, --[[String]] button1, --[[String]] button2, --[[String]] button3, --[[AlertWindow::AlertIconType]] iconType, --[[int]] numButtons, --[[Component*]] associatedComponent)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = AlertWindow()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawAlertBox (--[[Graphics]] g, --[[AlertWindow]] window, --[[Rectangle&lt;int&gt;]] textArea, --[[TextLayout]] layout)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:getAlertBoxWindowFlags ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getAlertWindowButtonHeight ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getAlertWindowMessageFont ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Font()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getAlertWindowFont ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Font()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawProgressBar (--[[Graphics]] g, --[[ProgressBar]] bar, --[[int]] width, --[[int]] height, --[[double]] progress, --[[String]] textToShow)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawSpinningWaitAnimation (--[[Graphics]] g, --[[Colour]] colour, --[[int]] x, --[[int]] y, --[[int]] w, --[[int]] h)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:areScrollbarButtonsVisible ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = true&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getScrollbarEffect ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = ImageEffectFilter()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getMinimumScrollbarThumbSize (--[[ScrollBar]] bar)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getDefaultScrollbarWidth ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getScrollbarButtonSize (--[[ScrollBar]] bar)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getTickShape (--[[float]] height)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Path()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getCrossShape (--[[float]] height)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Path()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawTreeviewPlusMinusBox (--[[Graphics]] g, --[[Rectangle&lt;float&gt;]] area, --[[Colour]] backgroundColour, --[[bool]] isOpen, --[[bool]] isMouseOver)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:fillTextEditorBackground (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[TextEditor]] editor)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawTextEditorOutline (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[TextEditor]] editor)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:createCaretComponent (--[[Component*]] keyFocusOwner)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = CaretComponent()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getDefaultFolderImage ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Drawable()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getDefaultDocumentFileImage ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Drawable()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:createFileChooserHeaderText (--[[String]] title, --[[String]] instructions)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = AttributedString()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawFileBrowserRow (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[String]] filename, --[[Image*]] icon, --[[String]] fileSizeDescription, --[[String]] fileTimeDescription, --[[bool]] isDirectory, --[[bool]] isItemSelected, --[[int]] itemIndex, --[[DirectoryContentsDisplayComponent]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:createFileBrowserGoUpButton ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Button()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:layoutFileBrowserComponent (--[[FileBrowserComponent]] component, --[[DirectoryContentsDisplayComponent*]] contentsComponent, --[[FilePreviewComponent*]] previewComponent, --[[ComboBox*]] currentPathBox, --[[TextEditor*]] filenameBox, --[[Button*]] goUpButton)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawBubble (--[[Graphics]] g, --[[BubbleComponent]] bubble, --[[Point&lt;float&gt;]] tip, --[[Rectangle&lt;float&gt;]] body)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawLasso (--[[Graphics]] g, --[[Component]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawPopupMenuBackground (--[[Graphics]] g, --[[int]] width, --[[int]] height)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;function MyLookAndFeel:drawPopupMenuItem (g, area, isSeparator, isActive, isHighlighted, isTicked, hasSubMenu, shortcutKeyText, icon, textColour)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#13;&#10;&#9;console (&quot;MyLookAndFeel:drawPopupMenuItem&quot;)&#10;end&#10;&#10;-- function MyLookAndFeel:getPopupMenuFont ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Font()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawPopupMenuUpDownArrow (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[bool]] isScrollUpArrow)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;function MyLookAndFeel:getIdealPopupMenuItemSize (params)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;end&#10;&#10;-- function MyLookAndFeel:getMenuWindowFlags ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawMenuBarBackground (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[bool]] isMouseOverBar, --[[MenuBarComponent]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:getMenuBarItemWidth (--[[MenuBarComponent]] component, --[[int]] itemIndex, --[[String]] itemText)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getMenuBarFont (--[[MenuBarComponent]] component, --[[int]] itemIndex, --[[String]] itemText)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Font()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawMenuBarItem (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[int]] itemIndex, --[[String]] itemText, --[[bool]] isMouseOverItem, --[[bool]] isMenuOpen, --[[bool]] isMouseOverBar, --[[MenuBarComponent]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawComboBox (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[bool]] isButtonDown, --[[int]] buttonX, --[[int]] buttonY, --[[int]] buttonW, --[[int]] buttonH, --[[ComboBox]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:getComboBoxFont (--[[ComboBox]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Font()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:createComboBoxTextBox (--[[ComboBox]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Label()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:positionComboBoxText (--[[ComboBox]] component, --[[Label]] label)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawLabel (--[[Graphics]] g, --[[Label]] label)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawLinearSlider (--[[Graphics]] g, --[[int]] x, --[[int]] y, --[[int]] width, --[[int]] height, --[[float]] sliderPos, --[[float]] minSliderPos, --[[float]] maxSliderPos, --[[Slider::SliderStyle]] style, --[[Slider]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawLinearSliderBackground (--[[Graphics]] g, --[[int]] x, --[[int]] y, --[[int]] width, --[[int]] height, --[[float]] sliderPos, --[[float]] minSliderPos, --[[float]] maxSliderPos, --[[Slider::SliderStyle]] style, --[[Slider]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawLinearSliderThumb (--[[Graphics]] g, --[[int]] x, --[[int]] y, --[[int]] width, --[[int]] height, --[[float]] sliderPos, --[[float]] minSliderPos, --[[float]] maxSliderPos, --[[Slider::SliderStyle]] style, --[[Slider]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:getSliderThumbRadius (--[[Slider]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawRotarySlider (--[[Graphics]] g, --[[int]] x, --[[int]] y, --[[int]] width, --[[int]] height, --[[float]] sliderPosProportional, --[[float]] rotaryStartAngle, --[[float]] rotaryEndAngle, --[[Slider]] slider)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:createSliderButton (--[[Slider]] component, --[[bool]] isIncrement)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Button()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:createSliderTextBox (--[[Slider]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Label()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getSliderEffect (--[[Slider]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = ImageEffectFilter()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getTooltipSize (--[[String]] tipText, --[[int]] width, --[[int]] height)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawTooltip (--[[Graphics]] g, --[[String]] text, --[[int]] width, --[[int]] height)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:createFilenameComponentBrowseButton (--[[String]] text)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Button()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:layoutFilenameComponent (--[[FilenameComponent]] component, --[[ComboBox*]] filenameBox, --[[Button*]] browseButton)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawConcertinaPanelHeader (--[[Graphics]] g, --[[Rectangle&lt;int&gt;]] area, --[[bool]] isMouseOver, --[[bool]] isMouseDown, --[[ConcertinaPanel]] component, --[[Component]] panel)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawCornerResizer (--[[Graphics]] g, --[[int]] w, --[[int]] h, --[[bool]] isMouseOver, --[[bool]] isMouseDragging)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawResizableFrame (--[[Graphics]] g, --[[int]] w, --[[int]] h, --[[BorderSize&lt;int&gt;]] borderSize)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:fillResizableWindowBackground (--[[Graphics]] g, --[[int]] w, --[[int]] h, --[[BorderSize&lt;int&gt;]] borderSize, --[[ResizableWindow]] window)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawResizableWindowBorder (--[[Graphics]] g, --[[int]] w, --[[int]] h, --[[BorderSize&lt;int&gt;]] borderSize, --[[ResizableWindow]] window)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawDocumentWindowTitleBar (--[[DocumentWindow]] window, --[[Graphics]] g, --[[int]] w, --[[int]] h, --[[int]] titleSpaceX, --[[int]] titleSpaceW, --[[Image*]] icon, --[[bool]] drawTitleTextOnLeft)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:createDocumentWindowButton (--[[int]] buttonType)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Button()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:positionDocumentWindowButtons (--[[DocumentWindow]] window, --[[int]] titleBarX, --[[int]] titleBarY, --[[int]] titleBarW, --[[int]] titleBarH, --[[Button*]] minimiseButton, --[[Button*]] maximiseButton, --[[Button*]] closeButton, --[[bool]] positionTitleBarButtonsOnLeft)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:getDefaultMenuBarHeight ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:createDropShadowerForComponent (--[[Component*]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = DropShadower()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;function MyLookAndFeel:drawGroupComponentOutline (--[[Graphics]] g, --[[int]] w, --[[int]] h, --[[String]] text, --[[Justification]] justification, --[[GroupComponent]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#13;&#10;&#9;g:fillAll (Colour (0xff0bffff))&#10;end&#10;&#10;-- function MyLookAndFeel:getTabButtonSpaceAroundImage ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getTabButtonOverlap (--[[int]] tabDepth)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getTabButtonBestWidth (--[[TabBarButton]] component, --[[int]] tabDepth)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue == 1&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:getTabButtonExtraComponentBounds (--[[TabBarButton]] component, --[[Rectangle&lt;int&gt;]] textArea, --[[Component]] extraComp)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Rectangle&lt;int&gt;()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawTabButton (--[[TabBarButton]] component, --[[Graphics]] g, --[[bool]] isMouseOver, --[[bool]] isMouseDown)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawTabButtonText (--[[TabBarButton]] component, --[[Graphics]] g, --[[bool]] isMouseOver, --[[bool]] isMouseDown)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawTabAreaBehindFrontButton (--[[TabbedButtonBar]] component, --[[Graphics]] g, --[[int]] w, --[[int]] h)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:createTabButtonShape (--[[TabBarButton]] component, --[[Path]] p, --[[bool]] isMouseOver, --[[bool]] isMouseDown)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:fillTabButtonShape (--[[TabBarButton]] component, --[[Graphics]] g, --[[Path]] p, --[[bool]] isMouseOver, --[[bool]] isMouseDown)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:createTabBarExtrasButton ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Button()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawImageButton (--[[Graphics]] g, --[[Image*]] image, --[[int]] imageX, --[[int]] imageY, --[[int]] imageW, --[[int]] imageH, --[[Colour]] overlayColour, --[[float]] imageOpacity, --[[ImageButton]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawTableHeaderBackground (--[[Graphics]] g, --[[TableHeaderComponent]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawTableHeaderColumn (--[[Graphics]] g, --[[String]] columnName, --[[int]] columnId, --[[int]] width, --[[int]] height, --[[bool]] isMouseOver, --[[bool]] isMouseDown, --[[int]] columnFlags)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:paintToolbarBackground (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[Toolbar]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:createToolbarMissingItemsButton (--[[Toolbar]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Button()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:paintToolbarButtonBackground (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[bool]] isMouseOver, --[[bool]] isMouseDown, --[[ToolbarItemComponent]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:paintToolbarButtonLabel (--[[Graphics]] g, --[[int]] x, --[[int]] y, --[[int]] width, --[[int]] height, --[[String]] text, --[[ToolbarItemComponent]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawStretchableLayoutResizerBar (--[[Graphics]] g, --[[int]] w, --[[int]] h, --[[bool]] isVerticalBar, --[[bool]] isMouseOver, --[[bool]] isMouseDragging)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawPropertyPanelSectionHeader (--[[Graphics]] g, --[[String]] name, --[[bool]] isOpen, --[[int]] width, --[[int]] height)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawPropertyComponentBackground (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[PropertyComponent]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawPropertyComponentLabel (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[PropertyComponent]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:getPropertyComponentContentPosition (--[[PropertyComponent]] component)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;&#9;-- returnValue = Rectangle&lt;int&gt;()&#10;&#9;-- return returnValue&#10;--end&#10;&#10;-- function MyLookAndFeel:drawCallOutBoxBackground (--[[CallOutBox]] component, --[[Graphics]] g, --[[Path]] path, --[[Image]] cachedImage)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawLevelMeter (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[float]] level)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:drawKeymapChangeButton (--[[Graphics]] g, --[[int]] width, --[[int]] height, --[[Button]] component, --[[String]] keyDescription)&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end&#10;&#10;-- function MyLookAndFeel:playAlertSound ()&#10;&#9;--&#10;&#9;-- Body&#10;&#9;--&#10;-- end"
                 luaMethodLinkedProperty="" luaMethodSource="0" uuid="d3bf7366f6c044c2b0ad6880e27eb695"
                 luaMethodValid="1"/>
    </luaManagerMethods>
  </luaManager>
  <panelResources/>
  <uiPanelEditor uiPanelCanvasRectangle="0 0 295 308" uiPanelSnapSize="8" uiPanelBackgroundColour="0xffffffff"
                 uiPanelBackgroundColour1="0xffffffff" uiPanelBackgroundColour2="0xffffffff"
                 uiPanelBackgroundGradientType="1" uiPanelImageResource="-- None"
                 uiPanelEditMode="0" uiPanelViewPortSize="791" uiPanelPropertiesSize="197"
                 uiPanelLock="0" uiPanelDisabledOnEdit="0" uiPanelWidth="400"
                 uiPanelHeight="400" name="DEMO - Look And Feel" uiPanelImageAlpha="255"
                 uiPanelImageLayout="64" uiPanelSnapActive="1" uiPanelPropertiesOnRight="0"
                 luaPanelPaintBackground="-- None" luaPanelResized="-- None" luaPanelFileDragDropHandler="-- None"
                 luaPanelFileDragEnterHandler="-- None" luaPanelFileDragExitHandler="-- None"
                 uiPanelInvisibleComponentAlpha="0.5" uiPanelMidiToolbarVisible="0"
                 uiPanelTooltipBackgroundColour="0xffeeeebb" uiPanelTooltipOutlineColour="0xff000000"
                 uiPanelTooltipColour="0xff000000" uiPanelTooltipCornerRound="1"
                 uiPanelTooltipPlacement="2" uiPanelTooltipFont="&lt;Sans-Serif&gt;;15;1;0;0;0;1;0"
                 uiPanelZoom="1">
    <uiPanelCanvasLayer uiPanelCanvasLayerName="New layer" uiPanelCanvasLayerUid="7655b8cb040000005b0000006e000000"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="1"
                        uiPanelCanvasLayerIndex="0"/>
  </uiPanelEditor>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="0" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorExcludeFromSnapshot="0"
             modulatorValueExpression="modulatorValue" modulatorValueExpressionReverse="midiValue"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="modulator-1" modulatorMin="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;0" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="0xffffffff"
               uiSliderRotaryOutlineColour="0xff0000ff" uiSliderRotaryFillColour="0xff0000ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;0" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="7655b8cb040000005b0000006e000000"
               componentRectangle="16 16 64 64" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="group" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;0" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiGroupText="Group Text" uiGroupTextColour="ff000000"
               uiGroupOutlineColour1="ff000000" uiGroupOutlineColour2="ff000000"
               uiGroupBackgroundColour1="ffff5c5c" uiGroupBackgroundColour2="ffb13d3d"
               uiGroupOutlineGradientType="0" uiGroupBackgroundGradientType="1"
               uiGroupBackgroundImage="" componentRectangle="16 16 260 214"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="7655b8cb040000005b0000006e000000" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="1" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorExcludeFromSnapshot="0"
             modulatorValueExpression="modulatorValue" modulatorValueExpressionReverse="midiValue"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="modulator-3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;0" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiButtonTrueValue="1" uiButtonFalseValue="0"
               uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff" uiButtonColourOff="0xff4364ff"
               uiButtonTextColourOn="0xff000000" uiButtonTextColourOff="0xff454545"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentRectangle="96 16 88 32"
               componentLayerUid="7655b8cb040000005b0000006e000000" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="2" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorExcludeFromSnapshot="0"
             modulatorValueExpression="modulatorValue" modulatorValueExpressionReverse="midiValue"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="modulator-4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;0" componentVisibleName="modulator-4"
               componentMouseCursor="2" componentGroupName="group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiButtonTextColourOn="0xff000000"
               uiToggleButtonText="Button" uiButtonTrueValue="1" uiButtonFalseValue="0"
               uiButtonColourOff="0xff0000ff" componentRectangle="96 64 88 32"
               componentLayerUid="7655b8cb040000005b0000006e000000" uiType="uiToggleButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="5" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorExcludeFromSnapshot="0"
             modulatorValueExpression="modulatorValue" modulatorValueExpressionReverse="midiValue"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="setLookAndFeel1"
             name="modulator-7" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;0" componentVisibleName="modulator-5"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiButtonTrueValue="1" uiButtonFalseValue="0"
               uiButtonIsToggle="0" uiButtonColourOn="0xff0000ff" uiButtonColourOff="0xff4364ff"
               uiButtonTextColourOn="0xff000000" uiButtonTextColourOff="0xff454545"
               uiButtonContent="Original&#10;Custom" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentRectangle="24 232 247 62" uiType="uiButton" componentLayerUid="7655b8cb040000005b0000006e000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;0" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="group" componentGroupped="1"
               componentSnapSize="32" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0"
               uiLabelText="Label text" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="16 104 96 32" componentLayerUid="7655b8cb040000005b0000006e000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="3" vstIndex="4" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorExcludeFromSnapshot="0"
             modulatorValueExpression="modulatorValue" modulatorValueExpressionReverse="midiValue"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="modulator-1" modulatorMin="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;0" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiComboArrowColour="0xff0000ff"
               uiComboOutlineColour="0xff0000ff" uiComboTextColour="0xff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;0" uiComboButtonColour="0xff0000ff"
               uiComboBgColour="0xffffffff" uiComboMenuBackgroundColour="0xfff0f0f0"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="item 1&#10;item 2&#10;item 3&#10;item 4"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="7655b8cb040000005b0000006e000000"
               componentRectangle="24 160 88 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="99" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorExcludeFromSnapshot="0"
             modulatorValueExpression="modulatorValue" modulatorValueExpressionReverse="midiValue"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="modulator-5" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;0" componentVisibleName="modulator-5"
               componentMouseCursor="2" componentGroupName="group" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;0" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiSliderStyle="LinearVertical"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="0xffffffff"
               uiSliderRotaryOutlineColour="0xff0000ff" uiSliderRotaryFillColour="0xff0000ff"
               uiSliderThumbColour="ffffffff" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;0" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="7655b8cb040000005b0000006e000000"
               componentRectangle="184 88 64 111" uiType="uiSlider"/>
  </modulator>
</panel>
