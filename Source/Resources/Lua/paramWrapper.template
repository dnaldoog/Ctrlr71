	Graphics *g;
	int x;
	int y;
	int w;
	int h;
	int width;
	int height;
	int colourId;
	int buttonX;
	int buttonY;
	int buttonW;
	int buttonH;
	int titleSpaceX;
	int titleSpaceW;
	int buttonType;
	int titleBarX;
	int titleBarY;
	int titleBarW;
	int titleBarH;
	int tabDepth;
	int imageX;
	int imageY;
	int imageW;
	int imageH;
	int columnId;
	int columnFlags;
	float sliderPos;
	float minSliderPos;
	float maxSliderPos;
	float imageOpacity;
	float level;
	const Font *font;
	Component *component;
	Button *button;
	ImageButton *imageButton;
	TextButton *textButton;
	ToggleButton *toggleButton;
	Colour colour;
	Colour backgroundColour;
	Colour textColour;
	Colour overlayColour;
	const Colour *backgroundColourRef;
	const Colour *colourRef;
	const Colour *textColourPtr;
	const Colour *overlayColourRef;
	bool isMouseOverButton;
	bool isButtonDown;
	bool ticked;
	bool isEnabled;
	bool isOpen;
	bool isMouseOver;
	bool isActive;
	bool isHighlighted;
	bool isTicked;
	bool hasSubMenu;
	bool isScrollUpArrow;
	bool isMouseOverBar;
	bool isMouseOverItem;
	bool isMenuOpen;
	bool isIncrement;
	bool isMouseDown;
	bool isMouseDragging;
	bool drawTitleTextOnLeft;
	bool positionTitleBarButtonsOnLeft;
	bool isVerticalBar;
	const String *keyDescription;
	const String *name;
	const String *text;
	const String *title;
	const String *message;
	const String *button1;
	const String *button2;
	const String *button3;
	const String *instructions;
	const String *filename;
	const String *shortcutKeyText;
	const String *itemText;
	const String *tipText;
	const String *columnName;
	const Image *icon;
	Image *image;
	const Drawable *drawableIcon;
	bool isSeparator;
	int standardMenuItemHeight;
	int idealWidth;
	int idealHeight;
	float sliderPosProportional;
	float rotaryStartAngle;
	float rotaryEndAngle;
	Slider *slider;
	AlertWindow::AlertIconType  	iconType;
	int numButtons;
	Component *associatedComponent;
	AlertWindow *window;
	const Rectangle<int> *textArea;
	TextLayout *layout;
	ProgressBar *progressBar;
	double progress;
	const String *textToShow;
	ScrollBar *scrollBar;
	const Rectangle<float> *area;
	Rectangle<int> *areaInt;
	Rectangle<int> areaIntConst;
	TextEditor *textEditor, *editor;
	Component *keyFocusOwner;
	DirectoryContentsDisplayComponent *directoryContentsDisplayComponent;
	const String *fileSizeDescription;
	const String *fileTimeDescription;
	bool isDirectory;
	bool isItemSelected;
	int itemIndex;
	FileBrowserComponent *fileBrowserComponent;
	FilePreviewComponent *filePreviewComponent;
	ComboBox *currentPathBox;
	TextEditor *filenameBox;
	Button *goUpButton;
	BubbleComponent *bubble, *bubbleComponent;
	const Point<float> *tip;
	const Rectangle<float> *body;
	MenuBarComponent *menuBarComponent;
	ComboBox *comboBox;
	Label *label;
	Slider::SliderStyle sliderStyle;
	FilenameComponent *filenameComponent;
	ConcertinaPanel *concertinaPanel;
	const BorderSize<int> *borderSize;
	ResizableWindow *resizableWindow;
	DocumentWindow *documentWindow;
	Button *minimiseButton;
	Button *maximiseButton;
	Button *closeButton;
	const Justification *justification;
	GroupComponent *groupComponent;
	TabBarButton *tabBarButton;
	TabbedButtonBar *tabbedButtonBar;
	Path *p;
	const Path *path;
	TableHeaderComponent *tableHeaderComponent;
	Toolbar *toolbar;
	ToolbarItemComponent *toolbarItemComponent;
	PropertyComponent *propertyComponent;
	CallOutBox *callOutBox;